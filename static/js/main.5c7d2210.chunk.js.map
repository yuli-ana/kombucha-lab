{"version":3,"sources":["components/FixedBar.js","components/Header.js","components/catalogue/Main.js","components/catalogue/List.js","components/firebase.js","App.js","serviceWorker.js","index.js"],"names":["FixedBar","handleCartClick","setState","activeModal","handleClick","state","className","onClick","this","icon","faShoppingCart","props","totalCounter","faTimes","items","reduce","acc","value","find","item","id","push","map","i","console","log","count","key","src","image","alt","name","price","faMinusSquare","href","target","rel","Component","Header","text","Main","children","List","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","newItem","dataArr","currentCount","modalArr","cartCounter","database","ref","on","response","data","val","newState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c7d2210.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { faShoppingCart, faTimes, faMinusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import Modal from './Modal';\n// import Button from './Button';\n\nclass FixedBar extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            activeModal: false,\n        }\n    }\n\n    handleCartClick = () => {\n        this.setState({\n            activeModal: true,\n        })\n    }\n\n    handleClick = () => {\n        this.setState({\n            activeModal: false,\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className='fixed-bar'>\n                    <button onClick={this.handleCartClick} className='btn-cart'><FontAwesomeIcon className='icon' icon={faShoppingCart} />{this.props.totalCounter}</button>\n                    <div className={`modal ${this.state.activeModal ? 'openModal' : 'closeModal'}`}>\n                        <div className={this.state.activeModal ? 'bg' : 'bg-none'}></div>\n                        <button onClick={this.handleClick} className='btn-close'><FontAwesomeIcon icon={faTimes} /></button>\n                        <ul className=\"sliding-menu\">\n                            {(this.props.items || [])\n                                .reduce((acc, value) => {\n\n                                    if (!acc.find(item => item.id === value.id)) {\n                                        acc.push(value);\n                                    }\n                                    return acc;\n\n                                }, [])\n                                .map((item, i) => {\n                                    console.log(this.props.count[item.id]);\n                                    return (\n                                        <li key={i} className='row cart-item'>\n                                            <div className='col-50'>\n                                                <img src={item.image} alt=\"name\" />\n                                            </div>\n                                            <div className='cart-item-info col-50'>\n                                                <p>{item.name}</p>\n                                                <p>{item.price}</p>\n                                                <button className=\"btn-remove\"><FontAwesomeIcon className='icon' icon={faMinusSquare} /></button>\n                                                <p>{this.props.count[item.id]}</p>\n                                            </div>\n                                        </li>\n                                    )\n                                })\n\n                            }\n                        </ul>\n                        <div>\n                            <p>total <span>$11.00</span></p>\n                            <a href='https://www.villagejuicery.com/collections/kombucha' target='blank' rel='noopener noreferer' >BUY</a>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default FixedBar;\n\n\n\n\n\n\n","import React, { Fragment } from 'react';\nimport FixedBar from './FixedBar';\n\n\n\nconst Header = () => {\n    return (\n        <Fragment>\n            <header className='header'>\n                <div\n                    className='wrapper'>\n                    <FixedBar\n                        text='buy'/>\n                    <div \n                    className='header-title'>\n                        <h1>Kombucha Lab</h1>\n                    </div>\n                </div>\n            </header>\n        </Fragment>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Main = ({ children }) => {\n    return (\n        <main>\n            <div className=\"wrapper\">\n                <div className='row row--end'>\n                    <section className='section'>\n                        {children}\n                    </section>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Main;","import React from 'react';\n\n\nconst List = ({ children }) => {\n    return (\n        <ul className='row'>\n            {children}\n        </ul>\n    )\n}\n\nexport default List;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD73GGG-hzzPQqu1xUqCyrSzeFxGSEvUNI\",\n  authDomain: \"kombucha-lab.firebaseapp.com\",\n  databaseURL: \"https://kombucha-lab.firebaseio.com\",\n  projectId: \"kombucha-lab\",\n  storageBucket: \"kombucha-lab.appspot.com\",\n  messagingSenderId: \"927556905744\",\n  appId: \"1:927556905744:web:0ba35bb412dfd209e05395\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React, { Component, Fragment } from 'react';\nimport Header from './components/Header';\nimport Main from './components/catalogue/Main';\nimport List from './components/catalogue/List';\nimport FixedBar from './components/FixedBar';\nimport firebase from './components/firebase';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      dataArr: [],\n      count: {},\n      cartCounter: 0,\n      modalArr: [\n      ],\n    }\n  }\n\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const data = response.val();\n\n      const newState = [];\n\n      for (let item in data) {\n        newState.push(data[item]);\n      }\n\n      this.setState({\n        dataArr: newState,\n      })\n    })\n  }\n\n  handleClick = (id) => {\n    const newItem = this.state.dataArr.find(item => item.id === id);\n\n    let currentCount = this.state.count[newItem.id] || 0;\n\n\n    this.setState({\n      modalArr: [...this.state.modalArr, newItem],\n      count: { \n        ...this.state.count, \n        [newItem.id]: currentCount + 1 \n      },\n\n      cartCounter: this.state.cartCounter + 1,\n    })\n  }\n\n\n\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <FixedBar totalCounter={this.state.cartCounter} count={this.state.count} items={this.state.modalArr}  />\n        <Main>\n          <List>\n            {this.state.dataArr.map(item => {\n              return (\n                <li\n                  className='col-33 catalogue-item'\n                  key={item.id}>\n                  <img src={item.image} alt={item.name} />\n                  <div className='item-details'>\n                    <h2 className='item-title'>{item.name}</h2>\n                    <p className='item-price'>${item.price}.00</p>\n                  </div>\n                  <div className='row'>\n                    <button\n                      onClick={() => this.handleClick(item.id)}\n                      className='btn-add col-80'>Add to cart\n                    </button>\n                    <p className='col-20 item-counter'>{this.state.count[item.id] || 0}</p>\n                  </div>\n                </li>\n              )\n            })}\n          </List>\n        </Main>\n      </Fragment>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}