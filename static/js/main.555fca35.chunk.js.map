{"version":3,"sources":["components/modal/ModalItem.js","components/modal/ModalList.js","components/modal/CompleteOrder.js","components/header/FixedBar.js","components/header/Header.js","components/catalogue/Main.js","components/catalogue/CatalogueList.js","components/firebase.js","components/catalogue/CatalogueItem.js","App.js","serviceWorker.js","index.js"],"names":["ModalItem","name","price","currentIdCount","image","className","src","alt","icon","faMinus","faPlus","ModalList","children","total","CompleteOrder","href","target","rel","FixedBar","handleCartClick","setState","activeModal","handleClick","state","onClick","this","faShoppingCart","props","totalCounter","faTimes","items","reduce","acc","value","find","item","id","push","map","i","key","count","Component","Header","text","Main","List","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CatalogueItem","updateCount","itemCounter","App","findId","firebaseData","currentCount","console","log","modalCarts","cartCounter","newPrice","database","ref","on","response","data","val","newState","CatalogueList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.555fca35.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\n\nconst ModalItem = ({ name, price, currentIdCount, image}) => {\n    return (\n        <Fragment>\n            <li className='row cart-item'>\n                <div className='col-40 cart-item-image'>\n                    <img src={image} alt=\"name\" />\n                </div>\n                <div className='row cart-item-info col-60'>\n                    <h3 className='col-auto'>{name}</h3>\n                    <p className='col-auto item-info-price'>${price}.00</p>\n                    <div className=\"row cart-update-count\">\n                        <div className=\"row col-auto\">\n                            <button className='btn btn-cart-icon col-auto'><FontAwesomeIcon className='icon' icon={faMinus} /></button>\n                            <span className='cart-item-count col-auto'>{currentIdCount}</span>\n                            <button className='btn btn-cart-icon col-auto'><FontAwesomeIcon className='icon' icon={faPlus} /></button>\n                        </div>\n                    </div>\n                </div>\n            </li>\n        </Fragment>\n    )\n}\n\nexport default ModalItem;","import React from 'react';\n\nconst ModalList = ({children, total}) => {\n    return (\n        <ul>\n            <h2 className=\"modal-list-title\">Shopping cart: {total > 1 ? (`${total} item(s)`) : (`${total} item`)}</h2>\n            {children}\n        </ul>\n    )\n}\n\nexport default ModalList;","import React from 'react';\n\nconst CompleteOrder = () => {\n    return (\n        <div>\n            <span>total <span>$11.00</span></span>\n            <a href='https://www.villagejuicery.com/collections/kombucha' target='_blank' rel='noopener noreferer' >BUY</a>\n        </div>\n    )\n}\n\nexport default CompleteOrder;","import React, { Component, Fragment } from 'react';\nimport { faShoppingCart, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ModalItem from '../modal/ModalItem'\nimport ModalList from '../modal/ModalList';\nimport CompleteOrder from '../modal/CompleteOrder';\n\nclass FixedBar extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            activeModal: false,\n        }\n    }\n\n    handleCartClick = () => {\n        this.setState({\n            activeModal: true,\n        })\n    }\n\n    handleClick = () => {\n        this.setState({\n            activeModal: false,\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className='fixed-bar'>\n                    <button onClick={this.handleCartClick} className='btn btn-cart'><FontAwesomeIcon className='icon' icon={faShoppingCart} />{this.props.totalCounter}</button>\n                    <div className={`modal ${this.state.activeModal ? 'open-modal' : 'modal'}`}>\n                        <div className={this.state.activeModal ? 'add-overlay' : 'remove-overlay'}></div>\n                        <button onClick={this.handleClick} className='btn btn-close'><FontAwesomeIcon icon={faTimes} /></button>\n                        <ModalList total={this.props.totalCounter}>\n                            {(this.props.items || [])\n                                .reduce((acc, value) => {\n\n                                    if (!acc.find(item => item.id === value.id)) {\n                                        acc.push(value);\n                                    }\n                                    return acc;\n\n                                }, [])\n                                .map((item, i) => {\n                                    return (\n                                        <ModalItem key={i} name={item.name} price={item.price} currentIdCount={this.props.count[item.id]} image={item.image} />\n                                    )\n                                })\n                            }\n                        </ModalList>\n                        <CompleteOrder/>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default FixedBar;\n","import React, { Fragment } from 'react';\nimport FixedBar from './FixedBar';\n\n\n\nconst Header = () => {\n    return (\n        <Fragment>\n            <header className='header'>\n                <div\n                    className='wrapper'>\n                    <FixedBar\n                        text='buy'/>\n                    <div \n                    className='header-title col-auto'>\n                        <h1>Kombucha Lab</h1>\n                    </div>\n                </div>\n            </header>\n        </Fragment>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Main = ({ children }) => {\n    return (\n        <main>\n            <div className=\"wrapper\">\n                <div className='row row--center'>\n                    <section className='section'>\n                        {children}\n                    </section>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Main;","import React from 'react';\n\n\nconst List = ({ children }) => {\n    return (\n        <ul className='row'>\n            {children}\n        </ul>\n    )\n}\n\nexport default List;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD73GGG-hzzPQqu1xUqCyrSzeFxGSEvUNI\",\n  authDomain: \"kombucha-lab.firebaseapp.com\",\n  databaseURL: \"https://kombucha-lab.firebaseio.com\",\n  projectId: \"kombucha-lab\",\n  storageBucket: \"kombucha-lab.appspot.com\",\n  messagingSenderId: \"927556905744\",\n  appId: \"1:927556905744:web:0ba35bb412dfd209e05395\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React from 'react';\n\nconst CatalogueItem = ({ image, name, price, updateCount, itemCounter }) => {\n    return (\n        <li\n            className='col-33 catalogue-item'>\n            <img src={image} alt={name} />\n            <div className='item-details'>\n                <h2 className='item-title'>{name}</h2>\n                <p className='item-price'>${price}.00</p>\n            </div>\n            <div className='row row--column'>\n                <span className='item-counter'>{itemCounter}</span>\n                <button\n                    onClick={updateCount}\n                    className='btn-add'>Add to cart\n                    </button>\n            </div>\n        </li>\n    )\n\n}\n\n\nexport default CatalogueItem;","import React, { Component, Fragment } from 'react';\nimport Header from './components/header/Header';\nimport Main from './components/catalogue/Main';\nimport CatalogueList from './components/catalogue/CatalogueList';\nimport FixedBar from './components/header/FixedBar';\nimport firebase from './components/firebase';\nimport CatalogueItem from './components/catalogue/CatalogueItem';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n\n    this.state = {\n\n      firebaseData: [],\n      // Store id property of each cart with individual counter value\n      count: {},\n      newPrice: [],\n      cartCounter: 0,\n      modalCarts: [\n      ],\n    }\n  }\n\n\n  // Get data from Firebase\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const data = response.val();\n\n      const newState = [];\n\n      for (let item in data) {\n        newState.push(data[item]);\n      }\n\n      this.setState({\n        firebaseData: newState,\n      })\n    })\n  }\n\n  // Event handler for cart click\n  handleClick = (id) => {\n\n    // Find, if clicked cart ID matches product ID in 'firebaseData' object\n    const findId = this.state.firebaseData.find(item => item.id === id);\n    \n    // Store new property (in 'count' object) as matching item ID or '0' \n    let currentCount = this.state.count[findId.id] || 0;\n\n    console.log(findId.id);\n    \n    // Update state\n    this.setState({\n      // Spread old value and add new value (ID), map over modalCarts to render carts in a 'ModalList'\n      modalCarts: [\n        ...this.state.modalCarts, findId, \n      ],\n\n      // Spread old id value and update matching id value on click\n      count: {\n        ...this.state.count,\n        [findId.id]: currentCount + 1\n      },\n      \n      // Update item count in cart\n      cartCounter: this.state.cartCounter + 1,      \n    })\n  }\n\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"overflow-hidden\">\n          <Header />\n          <FixedBar cartCounter={this.state.cartCounter} count={this.state.count} modalCarts={this.state.modalCarts} />\n          <Main>\n            <CatalogueList>\n              {this.state.firebaseData.map(item => {\n                return (\n                  <CatalogueItem key={item.id} id={item.id} name={item.name} price={item.price} image={item.image} updateCount={() => this.handleClick(item.id)} itemCounter={this.state.count[item.id] || 0} />\n                )\n              })}\n            </CatalogueList>\n          </Main>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}